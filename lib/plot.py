from itertools import chain
from math import ceil
from typing import List, Tuple

import matplotlib.pyplot as plt
import pandas as pd
from matplotlib.ticker import MaxNLocator


def plot_training_stat(stats: pd.DataFrame, stat: str, ax = None):
    """
    Parameters
    ----------
    stats : pd.DataFrame
        Tensorflow statistics as generated by `tf.keras.callbacks.CSVLogger`.

    stat : str
        Name of the statistic to plot (e.g. 'loss', 'precision', ...).

    plt : matplotlib.axes.Axes, optional
        Axes to draw the plot on. Will draw on the current plot if None.
    """
    if not ax:
        ax = plt.gca()

    ax.plot(stats['epoch'], stats[stat], label='train')
    ax.plot(stats['epoch'], stats[f"val_{stat}"], label='validation')
    ax.set_title(stat)
    ax.set_xlabel('Epoch')
    ax.xaxis.set_major_locator(MaxNLocator(integer=True))
    ax.legend(loc='right')


def plot_training_stats(stats: pd.DataFrame, metrics: List[str] = None,
                        ncols: int = 2, subplot_size: Tuple[int] = (6, 4)):
    """
    Parameters
    ----------
    stats : pd.DataFrame
        Tensorflow statistics as generated by `tf.keras.callbacks.CSVLogger`.

    metrics : List[str], optional
        List of metrics to plot. Defaults to all metrics present in `stats` dataframe.

    ncols : int, optional
        Number of columns to plot on.

    subplot_size : (int, int), optional
        Subplot size.
    """

    if not metrics:
        # ignore first column (epoch)
        metrics = list([s for s in stats.columns[1:] if not s.startswith('val_')])

    nrows = ceil(len(metrics) / ncols)
    figsize = (subplot_size[0] * ncols, subplot_size[1] * nrows)
    _, axes = plt.subplots(nrows, ncols, figsize=figsize, tight_layout=True)

    for name, axis in zip(metrics, chain.from_iterable(axes)):
        plot_training_stat(stats, name, axis)
